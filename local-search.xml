<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>牛牛寒假训练营2题解</title>
    <link href="/2025/01/24/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A52%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/01/24/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A52%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>牛牛寒假训练营1题解</title>
    <link href="/2025/01/22/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A51%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/01/22/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A51%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="该加训力！这场比赛鉴定为我的鸣潮练度提升200-导致的ACM水平下降了1e9-7倍，而其他人却稳定提升2e5-5倍"><a href="#该加训力！这场比赛鉴定为我的鸣潮练度提升200-导致的ACM水平下降了1e9-7倍，而其他人却稳定提升2e5-5倍" class="headerlink" title="该加训力！这场比赛鉴定为我的鸣潮练度提升200%导致的ACM水平下降了1e9+7倍，而其他人却稳定提升2e5+5倍"></a>该加训力！<del><a href="https://mc.kurogames.com/">这场比赛鉴定为我的鸣潮练度提升200%导致的ACM水平下降了1e9+7倍，而其他人却稳定提升2e5+5倍</a></del></h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>牛牛训练营1第一场只写出四道题，其中一些题的罚时因为一些浅显的错误WA了好几发实在是太可惜了。下面就从我做出的四题AC的顺序开始分析，然后再进行补题。</p><p>签到题：D G B A；</p><h2 id="D题："><a href="#D题：" class="headerlink" title="D题："></a>D题：</h2><p>题面如下：</p><p>小红拿到了一个数组，她可以进行任意次以下操作：选择两个元素，使得其中一个加 1，另一个减 1。<br>小红希望最终数组变成一个排列，请你帮助他确定这能否实现。如果可以实现的话，还需要求出最小操作次数。  </p><p>长度为 n 的排列是由 1∼n 这 n 个整数、按任意顺序组成的数组，其中每个整数恰好出现一次。例如，{2,3,1,5,4} 是一个长度为 5 的排列，而 {1,2,2} 和 {1,3,4} 都不是排列，因为前者存在重复元素，后者包含了超出范围的数。</p><p><strong>分析：</strong></p><p>只需要开一个map统计出现的数组元素以及其个数，首先判断map中的数组元素是否是2然后判断着两个元素的cnt是否相等即可。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ma;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        ma[a[i]]++;<br>    &#125;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [x,y]:ma)&#123;<br>        ans++;<br>        a.<span class="hljs-built_in">push_back</span>(ma[x]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">2</span>&amp;&amp;a[<span class="hljs-number">0</span>]==a[<span class="hljs-number">1</span>])&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G题："><a href="#G题：" class="headerlink" title="G题："></a>G题：</h2><p>题面如下：</p><p>小红拿到了一个数组，她可以进行任意次以下操作：选择两个元素，使得其中一个加 1，另一个减 1。<br>小红希望最终数组变成一个<u>排列</u>，请你帮助他确定这能否实现。如果可以实现的话，还需要求出最小操作次数。  </p><p>长度为 n 的排列是由 1∼n 这 n 个整数、按任意顺序组成的数组，其中每个整数恰好出现一次。例如，{2,3,1,5,4} 是一个长度为 5 的排列，而 {1,2,2} 和 {1,3,4} 都不是排列，因为前者存在重复元素，后者包含了超出范围的数。</p><p>分析：</p><p>我们观察题目，发现小红的操作并不会使数组中数的总和改变，这意味着只有当原数组的总和等于1+2+…+n时才能进行下一步（否则直接输出-1）。然后我们对数组进行排序。我们知道这个数组修改后必定会包含{1，2，…，n}这些元素，我们不妨设我们的数组就是{1，2，…，n}。故我们排序后直接对排序后的数组减去i的绝对值进行++++++。输出cnt/2即可。（因为一加一减是一次操作，我们进行上述的操作时，对整体求的是两倍）</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll sum=<span class="hljs-number">0</span>;<br>    ll n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        sum+=a[i];<br>    &#125;<br>    ll pd=n*(n<span class="hljs-number">+1</span>)/<span class="hljs-number">2</span>;<span class="hljs-comment">//求等差数列公式</span><br>    <span class="hljs-keyword">if</span>(sum!=pd)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ll cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(a<span class="hljs-number">+1</span>,a+n<span class="hljs-number">+1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cnt+=<span class="hljs-built_in">abs</span>(a[i]-i);<br>    &#125;<br>    cout&lt;&lt;cnt/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="切记切记要开龙龙！！不然会爆int！！！！"><a href="#切记切记要开龙龙！！不然会爆int！！！！" class="headerlink" title="切记切记要开龙龙！！不然会爆int！！！！"></a>切记切记要开龙龙！！不然会爆int！！！！</h1><h2 id="B题："><a href="#B题：" class="headerlink" title="B题："></a>B题：</h2><p>题面如下：</p><p>小红拿到了一棵树，她想请你寻找一条简单路径，使得这条路径不重不漏的经过所有节点。如果不存在这样的简单路径，则直接输出 −1。  </p><p>简单路径是指这样一条路径，其经过的顶点和边互不相同。</p><p>分析：</p><p>看起来是图论，实际上是一道思维题啦！通过幻想就可以得知，要求一条的简单路径，其中的头节点和尾节点只会在输入中出现一次，而其他节点只能出现两次。，我们就可以判断只出现不是两次的节点，（开map记录一下），然后输出即可。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">bool</span> vis[n];<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; d;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        d[u]++;<br>        d[v]++;<br>    &#125;<br>    vector&lt;<span class="hljs-type">int</span>&gt; b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(d[i]==<span class="hljs-number">1</span>)&#123;<br>            b.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(b.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">2</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;b[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b[<span class="hljs-number">1</span>]&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="A题："><a href="#A题：" class="headerlink" title="A题："></a>A题：</h2><p>小红拿到了一个由 n 个数字组成的数组 {a1​,a2​,⋯,an​}，她希望你找到一个不大于 10^18 的正整数 x，满足 x 和数组中任意一个元素都互不为倍数关系，即对于 i∈[1,n]，x 不是 ai​ 的倍数，且 ai​ 也不是 x 的倍数。</p><p>分析：</p><p>还是很简单的，ai的范围为1≤ai​≤10^9，我们只需要找一个大于1e9的质数（比如1e9+7）;</p><p>如果数组中含有1，设置ans=-1，否则输出1e9+7。（我是铸币，直接在输入循环中return 0，导致WA了5发。）</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">1</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>    cout&lt;&lt;mod&lt;&lt;endl;<br></code></pre></td></tr></table></figure><p>好了！以上就是我会做的题目了。接下来就该开始补题目了。<del>嘻嘻</del></p><h1 id="接下来是进阶题目：E-H-J-M"><a href="#接下来是进阶题目：E-H-J-M" class="headerlink" title="接下来是进阶题目：E H J M"></a><strong>接下来是进阶题目：E H J M</strong></h1><h2 id="先来M题："><a href="#先来M题：" class="headerlink" title="先来M题："></a>先来M题：</h2><p>定义一个数组的极差为：数组的元素最大值减去最小值。<br>小红拿到了一个数组，她准备进行恰好一次操作：选择一个非空区间，将其中所有元素都乘以 2。<br>小红希望最小化数组的极差，你能帮帮她吗？</p><p>（准备抄题解了）</p><p>思路：</p><p>我们需要找到该数组中最小的数假设确定它及其位置，假设最小值点为序列为k，则我们要直接使用multiset中的迭代器.rbegin()与.begin()寻找其最大值与最小值，我们设其为l,r,初始化为l=r。然后从k开始向l—或者向r++一个个遍历，寻找极差的最小值。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; b;<br>    multiset&lt;<span class="hljs-type">int</span>&gt; mu;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        b.<span class="hljs-built_in">push_back</span>(&#123;a[i],i&#125;);<br>        mu.<span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br>    ranges::<span class="hljs-built_in">sort</span>(b);<br>    <span class="hljs-keyword">auto</span> [l,r]=b[<span class="hljs-number">0</span>];<br>    mu.<span class="hljs-built_in">extract</span>(l);<br>    mu.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>*l);<br>    <span class="hljs-type">int</span> ans=*mu.<span class="hljs-built_in">rbegin</span>()-*mu.<span class="hljs-built_in">begin</span>();<br>    l=r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [_,i]:b)&#123;<br>        <span class="hljs-keyword">if</span>(i&gt;=l&amp;&amp;i&lt;=r) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=l<span class="hljs-number">-1</span>;j&gt;=i;j--)&#123;<br>            mu.<span class="hljs-built_in">extract</span>(a[j]);<br>            mu.<span class="hljs-built_in">insert</span>(a[j]*<span class="hljs-number">2</span>);<br>            ans=<span class="hljs-built_in">min</span>(ans,*mu.<span class="hljs-built_in">rbegin</span>()-*mu.<span class="hljs-built_in">begin</span>());<br>        &#125;<br>        l=<span class="hljs-built_in">min</span>(l,i);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=r<span class="hljs-number">+1</span>;j&lt;=i;j++)&#123;<br>            mu.<span class="hljs-built_in">extract</span>(a[j]);<br>            mu.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>*a[j]);<br>            ans=<span class="hljs-built_in">min</span>(ans,*mu.<span class="hljs-built_in">rbegin</span>()-*mu.<span class="hljs-built_in">begin</span>());<br>        &#125;<br>        r=<span class="hljs-built_in">max</span>(r,i);<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p><strong>multiset</strong>是C++<set>库中的一个类型，相当于一个集合，它支持插入一个数，和删除一个数，操作的时间复杂度均是O（log（n））。</p><p>multiset提供了.extract()与.insert()的操作,可以快速的进行删除和增添操作。</p><p>然后他的.rbegin()与.begin()两个操作能返回数组中的最大值和最小值</p><h2 id="然后就是E题："><a href="#然后就是E题：" class="headerlink" title="然后就是E题："></a>然后就是E题：</h2><p>小红定义一个数组是“双生数组”，当且仅当该数组大小为偶数，数组的元素种类恰好为 2 种，且这两种元素的出现次数相同。例如 {1,1,4,4,1,4} 是双生数组。<br>现在小红拿到了一个长度为偶数的数组，她可以进行若干次操作，每次操作将选择一个元素，使其加 1 或者减 1。小红希望你计算将该数组变成双生数组的最小操作次数。</p><p>思路：</p><p>我们对这个数组进行排序，然后会发现就是求数组前面一半的中位数和数组后面一半的中位数，然后将数组分别加上中位数的相减的绝对值，再考虑一下特殊情况即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sort</span>(a<span class="hljs-number">+1</span>,a+n<span class="hljs-number">+1</span>);<br>    ll cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> sum=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>        ll res=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n/<span class="hljs-number">2</span>;i++)&#123;<br>            res+=<span class="hljs-built_in">abs</span>(a[i]-x);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n/<span class="hljs-number">2</span><span class="hljs-number">+1</span>;i&lt;=n;i++)&#123;<br>            res+=<span class="hljs-built_in">abs</span>(a[i]-y);<br>        &#125; <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)&#123;<br>        <span class="hljs-keyword">auto</span> t = <span class="hljs-number">0ll</span>;<br>        <span class="hljs-keyword">if</span>(a[x] != a[y]) t = <span class="hljs-built_in">sum</span>(a[x], a[y]);<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">sum</span>(a[x] - <span class="hljs-number">1</span>, a[y]), <span class="hljs-built_in">sum</span>(a[x], a[y] + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;;<br>    <span class="hljs-type">int</span> t=n&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)&#123;<br>        x=t<span class="hljs-number">+1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>        y=t+x;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        x=t&gt;&gt;<span class="hljs-number">1</span>;<br>        y=t+x<span class="hljs-number">+1</span>;<br>    &#125;<br><br>    cout&lt;&lt;<span class="hljs-built_in">check</span>(x,y)&lt;&lt;endl;<br>    <span class="hljs-comment">//cout&lt;&lt;cnt&lt;&lt;endl;</span><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>补充：</p><p>这里采用了C++20新特性，可以通过上述代码方式在主函数中构建函数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[数论]裴蜀定理</title>
    <link href="/2025/01/19/%E6%95%B0%E8%AE%BA-%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    <url>/2025/01/19/%E6%95%B0%E8%AE%BA-%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在周赛上因为不记得扩展欧几里得和裴蜀定理，而导致那道超级easy的题目没写出来。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[模板]快速幂</title>
    <link href="/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <url>/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    
    <content type="html"><![CDATA[<p>相信大家对求幂运算都不陌生吧。当m是正整数时nᵐ的意义为m个n相乘，n的m次幂也就是n的m次方。</p><p>对于初学者，代码是如下呈现的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n,<span class="hljs-type">long</span> <span class="hljs-type">long</span> m)</span></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        res*=n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么在计算幂的时候他的时间复杂度就是O(m)。但是……假设如果说n,</p>]]></content>
    
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[数据结构]并查集</title>
    <link href="/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是“并查集”？"><a href="#什么是“并查集”？" class="headerlink" title="什么是“并查集”？"></a><u><strong>什么是“并查集”？</strong></u></h1><p><strong>并查集是一种用于管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点表示对应集合中的元素。</strong></p><p><strong>顾名思义，并查集支持两种操作：</strong></p><ul><li><strong>合并（Union）：合并两个元素所属集合（合并对应的树）</strong></li><li><strong>查询（Find）：查询某个元素所属集合（查询对应的树的根节点），这可以用于判断两个元素是否属于同一集合</strong></li></ul><p><strong>并查集在经过修改后可以支持单个元素的删除、移动；使用动态开点线段树还可以实现可持久化并查集。（摘自OI WIKI）</strong></p><h2 id="并查集（easy-ver）的实现包含几个个步骤："><a href="#并查集（easy-ver）的实现包含几个个步骤：" class="headerlink" title="并查集（easy.ver）的实现包含几个个步骤："></a><u><strong>并查集（easy.ver）的实现包含几个个步骤：</strong></u></h2><h3 id="1-初始化数组"><a href="#1-初始化数组" class="headerlink" title="1.初始化数组"></a>1.初始化数组</h3><p><strong>并查集通过构建一个一维数组来实现，本质上是维护一个森林。我们先定义出一个一维数组f[N]（其中N代表森林中元素个数）用来存放每一棵树的编号。一开始的时候每一棵树都是一个独立的集合。</strong></p><p><strong>代码实现如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>        f[i] = i;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-查询（Find）"><a href="#2-查询（Find）" class="headerlink" title="2.查询（Find）"></a>2.查询（Find）</h3><p><strong>我们需要沿着树向上移动，如果上一级是其父节点，则函数会继续进行查询，直至找到根节点（即祖宗节点）。</strong></p><p><img src="https://oi-wiki.org/ds/images/disjoint-set-find.svg" alt=""></p><p><strong>代码实现如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (f[x]!=x) &#123;<br>        <span class="hljs-keyword">return</span> f[x]=<span class="hljs-built_in">find</span>(f[x]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[x];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-合并（Union）"><a href="#3-合并（Union）" class="headerlink" title="3.合并（Union）"></a>3.合并（Union）</h3><p><strong>我们由上一步查询可得知相对应的集合的祖宗节点（即根节点），我们只需要将这两个集合的祖父节点相连即可。</strong></p><p><img src="https://oi-wiki.org/ds/images/disjoint-set-merge.svg" alt=""></p><p><strong>代码实现如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">union</span><span class="hljs-params">()</span></span>&#123;<br>    f[<span class="hljs-built_in">find</span>(b)] = <span class="hljs-built_in">find</span>(f[a]);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这就是并查集的简单的实现过程（一般不会超时吧）。如果遇到数据量巨大的时候，我们可以对查询与合并进行优化，这是后话了。</strong></p><h1 id="接下来我们看例题！！！"><a href="#接下来我们看例题！！！" class="headerlink" title="接下来我们看例题！！！"></a>接下来我们看例题！！！</h1><p><a href="https://www.luogu.com.cn/problem/P3367">洛谷p3367【模板】并查集</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>如题，现在有一个并查集，你需要完成合并和查询操作。</strong></p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p><strong>第一行包含两个整数 $N,M$ ,表示共有 $N$ 个元素和 $M$ 个操作。</strong></p><p><strong>接下来 $M$ 行，每行包含三个整数 $Z_i,X_i,Y_i$ 。</strong></p><p><strong>当 $Z_i=1$ 时，将 $X_i$ 与 $Y_i$ 所在的集合合并。</strong></p><p><strong>当 $Z_i=2$ 时，输出 $X_i$ 与 $Y_i$ 是否在同一集合内，是的输出</strong><br> <strong><code>Y</code> ；否则输出 <code>N</code> 。</strong></p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p><strong>对于每一个 $Z_i=2$ 的操作，都有一行输出，每行包含一个大写字母，为 <code>Y</code> 或者 <code>N</code> 。</strong></p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">N<br><span class="hljs-attribute">Y</span><br>N<br><span class="hljs-attribute">Y</span><br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>对于 $30\%$ 的数据，$N \le 10$，$M \le 20$。</strong></p><p><strong>对于 $70\%$ 的数据，$N \le 100$，$M \le 10^3$。</strong></p><p><strong>对于 $100\%$ 的数据，$1\le N \le 10^4$，$1\le M \le 2\times 10^5$，$1 \le X_i, Y_i \le N$，$Z_i \in \{ 1, 2 \}$。</strong></p><p><strong>AC code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//And in that light,I&#x27;ll find deliverance;</span><br><span class="hljs-comment">//可以和我打一辈子ACM吗？;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> op;<br>ll f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( f[x] != x ) &#123;<br>        <span class="hljs-keyword">return</span> f[x] = <span class="hljs-built_in">find</span>(f[x]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[x];<br>&#125;<br><span class="hljs-type">int</span> n, q;<br><span class="hljs-type">int</span> a, b;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>        f[<span class="hljs-built_in">find</span>(b)] = <span class="hljs-built_in">find</span>(f[a]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b))<br>            cout &lt;&lt; <span class="hljs-string">&quot;Y&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    IOS;<br>    cin &gt;&gt; n &gt;&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        f[i] = i;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        cin &gt;&gt; op &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><del>这是我新生赛的一道题目，因为板子记错了WA了25发，呜呜呜呜呜呜呜</del>~~~~</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一条博客</title>
    <link href="/2025/01/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/01/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>你好！欢迎来到我的博客。这是我的第一条blog。</p>]]></content>
    
    
    
    <tags>
      
      <tag>你好！</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
