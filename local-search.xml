<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2025/03/07/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A51%E9%A2%98%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/"/>
    <url>/2025/03/07/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A51%E9%A2%98%E8%A7%A3/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<hr><hr><h1 id="动态规划笔记之入门"><a href="#动态规划笔记之入门" class="headerlink" title="动态规划笔记之入门"></a>动态规划笔记之入门</h1><h2 id="何为动态规划？"><a href="#何为动态规划？" class="headerlink" title="何为动态规划？"></a>何为动态规划？</h2><p>（源自oi-wiki）动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。由于动态规划并不是某种具体的算法，而是一种解决特定问题的方法，因此它会出现在各式各样的数据结构中，与之相关的题目种类也更为繁杂。动态规划与递推类型可能有些类似。</p><h2 id="动态规划的性质"><a href="#动态规划的性质" class="headerlink" title="动态规划的性质"></a>动态规划的性质</h2><h3 id="1-无后效性"><a href="#1-无后效性" class="headerlink" title="1.无后效性"></a>1.无后效性</h3><p>简单来说就是，处于某个状态的和过去发生过的任何事件没有任何关系，它的状态只会与未来的状态有关。也就是说过去的事件已经假定求解完成了，不会受到后续进行策略的任何影响。</p><h3 id="2-子问题重叠"><a href="#2-子问题重叠" class="headerlink" title="2.子问题重叠"></a>2.子问题重叠</h3><p>对于有大量子问题重叠的问题，可以开数组将之前的子问题答案存储起来，加快运行速度。</p><p>例如：求解斐波那契数列的第n项是多少？</p><h4 id="1）暴力求解"><a href="#1）暴力求解" class="headerlink" title="1）暴力求解"></a>1）暴力求解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fei</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>||x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fei</span>(x<span class="hljs-number">-1</span>)+<span class="hljs-built_in">fei</span>(x<span class="hljs-number">-2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是这样求解的话，那么，他的运行模式就会变成下面这样：</p><p><img src="https://www.hello-algo.com/chapter_dynamic_programming/intro_to_dynamic_programming.assets/climbing_stairs_dfs_tree.png" alt=""></p><p>我们会发现这个会有很多的重复计算（时间复杂度是O(n^2))，这极大的影响了我们计算的时间复杂度。那重复计算的话，那我们不妨优化一下，如果说在递推求解的时候，如果之前已经访问或者说已经计算过了那么就直接跳过，那么，这就是我们接下来要说的<strong>记忆化搜索</strong>。</p><h4 id="2）记忆化搜索"><a href="#2）记忆化搜索" class="headerlink" title="2）记忆化搜索"></a>2）记忆化搜索</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> vis[N];<br><span class="hljs-type">int</span> sum[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fei</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>||x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(vis[x]) <span class="hljs-keyword">return</span> vis[x];<br>    <span class="hljs-keyword">return</span> vis[x]=<span class="hljs-built_in">fei</span>(x<span class="hljs-number">-1</span>)+<span class="hljs-built_in">fei</span>(x<span class="hljs-number">-2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候就会发现需要重复计算的数据就被sum数组存起来了，等到下一次用到的时候就可以直接使用了，时间复杂度大大减小了。可能说也算一种剪枝（？</p><p><img src="https://www.hello-algo.com/chapter_dynamic_programming/intro_to_dynamic_programming.assets/climbing_stairs_dfs_memo_tree.png" alt=""></p><p>但是这样可能还是太费空间的怎么办？不想开两个数组记录。这个时候时候就需要使用<strong>动态规划</strong>了。</p><h4 id="3）动态规划"><a href="#3）动态规划" class="headerlink" title="3）动态规划"></a>3）动态规划</h4><p>由于斐波那契数列的和是fei(1)=1,fei(0)=1,然后递推公式是fei(x)=fei(x-1)+fei(x-2);代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;cin&gt;&gt;n;<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        dp[i]=dp[i<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-2</span>];<br>    &#125;<br>    cout&lt;&lt;dp[n]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面所说的重叠子问题也就是把重复计算的过程，用空间提前储存好子问题的答案，等到需要用的时候，再快速拿出来使用，这样可以大大提高运行速率。如下：</p><p><img src="https://www.hello-algo.com/chapter_dynamic_programming/intro_to_dynamic_programming.assets/climbing_stairs_dp.png" alt=""></p><h3 id="3最优子结构"><a href="#3最优子结构" class="headerlink" title="3最优子结构"></a>3最优子结构</h3><p>‌<strong>最优子结构</strong>‌是动态规划算法中的一个重要概念，它指的是一个问题可以分解为若干个子问题，且这些子问题的最优解能够组合成原问题的最优解。也就是对子问题进行最优计算，再合并成这个最大问题的最优解。</p><h2 id="动态规划问题解题步骤"><a href="#动态规划问题解题步骤" class="headerlink" title="动态规划问题解题步骤"></a>动态规划问题解题步骤</h2><h3 id="1-初始化数值"><a href="#1-初始化数值" class="headerlink" title="1.初始化数值"></a>1.初始化数值</h3><h3 id="2-列状态转移方程"><a href="#2-列状态转移方程" class="headerlink" title="2.列状态转移方程"></a>2.列状态转移方程</h3><p>这里我们就写一个例题：</p><p>链接：<a href="https://ac.nowcoder.com/acm/problem/21302">https://ac.nowcoder.com/acm/problem/21302</a><br>来源：牛客网</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个长度为50的数字串,问你有多少个子序列构成的数字可以被3整除<br> 答案对1e9+7取模</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输入一个字符串，由数字构成，长度小于等于50<br></code></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输出一个整数<br></code></pre></td></tr></table></figure><p>我们这里可以思考一下，数字串的话，可以化为只含0，1，2的string。</p><p>首先执行第一步：初始化，这一题没有特殊要求，直接全部赋值为0；</p><p>遍历一遍这个字符串，我们可以发现如下规律，如果该字符串的第i项为0的话，则第i项可以被3整除的数量是</p><script type="math/tex; mode=display">dp[0][i]=dp[0][i-1]*2+1</script><p>如果第i项是1的话，第i项可以被3整除的数量更新成:</p><script type="math/tex; mode=display">dp[0][i]=dp[0][i-1]+dp[2][i-1]</script><p>如果第i项是2的话，第i项可以被3整除的数量更新成:</p><script type="math/tex; mode=display">dp[0][i]=dp[0][i-1]+dp[1][i-1]</script><p>然后每次计算完都要更新dp[1]与dp[2]的值，上边就是我们要找的状态转移方程。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>        a[i]=s[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> len=s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> m=(s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)%<span class="hljs-number">3</span>;<br>    dp[m][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)&#123;<br>        m=(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)%<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)&#123;<br>            dp[<span class="hljs-number">0</span>][i]=(dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span><span class="hljs-number">+1</span>)%mod;<br>            dp[<span class="hljs-number">1</span>][i]=(dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>)%mod;<br>            dp[<span class="hljs-number">2</span>][i]=(dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>)%mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;<br>            dp[<span class="hljs-number">0</span>][i]=(dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>])%mod;<br>            dp[<span class="hljs-number">1</span>][i]=(dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]<span class="hljs-number">+1</span>)%mod;<br>            dp[<span class="hljs-number">2</span>][i]=(dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>])%mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">2</span>)&#123;<br>            dp[<span class="hljs-number">0</span>][i]=(dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>])%mod;<br>            dp[<span class="hljs-number">1</span>][i]=(dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>])%mod;<br>            dp[<span class="hljs-number">2</span>][i]=(dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]<span class="hljs-number">+1</span>)%mod;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[<span class="hljs-number">0</span>][len<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>[动态规划]动态规划入门</title>
    <link href="/2025/03/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/"/>
    <url>/2025/03/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划笔记之入门"><a href="#动态规划笔记之入门" class="headerlink" title="动态规划笔记之入门"></a>动态规划笔记之入门</h1><h2 id="何为动态规划？"><a href="#何为动态规划？" class="headerlink" title="何为动态规划？"></a>何为动态规划？</h2><p>（源自oi-wiki）动态规划是一种通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。由于动态规划并不是某种具体的算法，而是一种解决特定问题的方法，因此它会出现在各式各样的数据结构中，与之相关的题目种类也更为繁杂。动态规划与递推类型可能有些类似。</p><h2 id="动态规划的性质"><a href="#动态规划的性质" class="headerlink" title="动态规划的性质"></a>动态规划的性质</h2><h3 id="1-无后效性"><a href="#1-无后效性" class="headerlink" title="1.无后效性"></a>1.无后效性</h3><p>简单来说就是，处于某个状态的和过去发生过的任何事件没有任何关系，它的状态只会与未来的状态有关。也就是说过去的事件已经假定求解完成了，不会受到后续进行策略的任何影响。</p><h3 id="2-子问题重叠"><a href="#2-子问题重叠" class="headerlink" title="2.子问题重叠"></a>2.子问题重叠</h3><p>对于有大量子问题重叠的问题，可以开数组将之前的子问题答案存储起来，加快运行速度。</p><p>例如：求解斐波那契数列的第n项是多少？</p><h4 id="1）暴力求解"><a href="#1）暴力求解" class="headerlink" title="1）暴力求解"></a>1）暴力求解</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fei</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>||x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">fei</span>(x<span class="hljs-number">-1</span>)+<span class="hljs-built_in">fei</span>(x<span class="hljs-number">-2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>如果是这样求解的话，那么，他的运行模式就会变成下面这样：</p><p><img src="https://www.hello-algo.com/chapter_dynamic_programming/intro_to_dynamic_programming.assets/climbing_stairs_dfs_tree.png" alt=""></p><p>我们会发现这个会有很多的重复计算（时间复杂度是O(n^2))，这极大的影响了我们计算的时间复杂度。那重复计算的话，那我们不妨优化一下，如果说在递推求解的时候，如果之前已经访问或者说已经计算过了那么就直接跳过，那么，这就是我们接下来要说的<strong>记忆化搜索</strong>。</p><h4 id="2）记忆化搜索"><a href="#2）记忆化搜索" class="headerlink" title="2）记忆化搜索"></a>2）记忆化搜索</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> vis[N];<br><span class="hljs-type">int</span> sum[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">fei</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">if</span>(x==<span class="hljs-number">1</span>||x==<span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">if</span>(vis[x]) <span class="hljs-keyword">return</span> vis[x];<br>    <span class="hljs-keyword">return</span> vis[x]=<span class="hljs-built_in">fei</span>(x<span class="hljs-number">-1</span>)+<span class="hljs-built_in">fei</span>(x<span class="hljs-number">-2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p>这个时候就会发现需要重复计算的数据就被sum数组存起来了，等到下一次用到的时候就可以直接使用了，时间复杂度大大减小了。可能说也算一种剪枝（？</p><p><img src="https://www.hello-algo.com/chapter_dynamic_programming/intro_to_dynamic_programming.assets/climbing_stairs_dfs_memo_tree.png" alt=""></p><p>但是这样可能还是太费空间的怎么办？不想开两个数组记录。这个时候时候就需要使用<strong>动态规划</strong>了。</p><h4 id="3）动态规划"><a href="#3）动态规划" class="headerlink" title="3）动态规划"></a>3）动态规划</h4><p>由于斐波那契数列的和是fei(1)=1,fei(0)=1,然后递推公式是fei(x)=fei(x-1)+fei(x-2);代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long</span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;cin&gt;&gt;n;<br>    dp[<span class="hljs-number">1</span>]=<span class="hljs-number">1</span>,dp[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">2</span>;i&lt;=n;i++)&#123;<br>        dp[i]=dp[i<span class="hljs-number">-1</span>]+dp[i<span class="hljs-number">-2</span>];<br>    &#125;<br>    cout&lt;&lt;dp[n]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面所说的重叠子问题也就是把重复计算的过程，用空间提前储存好子问题的答案，等到需要用的时候，再快速拿出来使用，这样可以大大提高运行速率。如下：</p><p><img src="https://www.hello-algo.com/chapter_dynamic_programming/intro_to_dynamic_programming.assets/climbing_stairs_dp.png" alt=""></p><h3 id="3最优子结构"><a href="#3最优子结构" class="headerlink" title="3最优子结构"></a>3最优子结构</h3><p>‌<strong>最优子结构</strong>‌是动态规划算法中的一个重要概念，它指的是一个问题可以分解为若干个子问题，且这些子问题的最优解能够组合成原问题的最优解。也就是对子问题进行最优计算，再合并成这个最大问题的最优解。</p><h2 id="动态规划问题解题步骤"><a href="#动态规划问题解题步骤" class="headerlink" title="动态规划问题解题步骤"></a>动态规划问题解题步骤</h2><h3 id="1-初始化数值"><a href="#1-初始化数值" class="headerlink" title="1.初始化数值"></a>1.初始化数值</h3><h3 id="2-列状态转移方程"><a href="#2-列状态转移方程" class="headerlink" title="2.列状态转移方程"></a>2.列状态转移方程</h3><p>这里我们就写一个例题：</p><p>链接：<a href="https://ac.nowcoder.com/acm/problem/21302">https://ac.nowcoder.com/acm/problem/21302</a><br>来源：牛客网</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>给你一个长度为50的数字串,问你有多少个子序列构成的数字可以被3整除<br> 答案对1e9+7取模</p><h3 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输入一个字符串，由数字构成，长度小于等于50<br></code></pre></td></tr></table></figure><h3 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">输出一个整数<br></code></pre></td></tr></table></figure><p>我们这里可以思考一下，数字串的话，可以化为只含0，1，2的string。</p><p>首先执行第一步：初始化，这一题没有特殊要求，直接全部赋值为0；</p><p>遍历一遍这个字符串，我们可以发现如下规律，如果该字符串的第i项为0的话，则第i项可以被3整除的数量是</p><script type="math/tex; mode=display">dp[0][i]=dp[0][i-1]*2+1</script><p>如果第i项是1的话，第i项可以被3整除的数量更新成:</p><script type="math/tex; mode=display">dp[0][i]=dp[0][i-1]+dp[2][i-1]</script><p>如果第i项是2的话，第i项可以被3整除的数量更新成:</p><script type="math/tex; mode=display">dp[0][i]=dp[0][i-1]+dp[1][i-1]</script><p>然后每次计算完都要更新dp[1]与dp[2]的值，上边就是我们要找的状态转移方程。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    string s;<br>    cin&gt;&gt;s;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>        a[i]=s[i]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> len=s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> m=(s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)%<span class="hljs-number">3</span>;<br>    dp[m][<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;len;i++)&#123;<br>        m=(s[i]-<span class="hljs-string">&#x27;0&#x27;</span>)%<span class="hljs-number">3</span>;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">0</span>)&#123;<br>            dp[<span class="hljs-number">0</span>][i]=(dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span><span class="hljs-number">+1</span>)%mod;<br>            dp[<span class="hljs-number">1</span>][i]=(dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>)%mod;<br>            dp[<span class="hljs-number">2</span>][i]=(dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>]*<span class="hljs-number">2</span>)%mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">1</span>)&#123;<br>            dp[<span class="hljs-number">0</span>][i]=(dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>])%mod;<br>            dp[<span class="hljs-number">1</span>][i]=(dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]<span class="hljs-number">+1</span>)%mod;<br>            dp[<span class="hljs-number">2</span>][i]=(dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>])%mod;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(m==<span class="hljs-number">2</span>)&#123;<br>            dp[<span class="hljs-number">0</span>][i]=(dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>])%mod;<br>            dp[<span class="hljs-number">1</span>][i]=(dp[<span class="hljs-number">1</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>])%mod;<br>            dp[<span class="hljs-number">2</span>][i]=(dp[<span class="hljs-number">2</span>][i<span class="hljs-number">-1</span>]+dp[<span class="hljs-number">0</span>][i<span class="hljs-number">-1</span>]<span class="hljs-number">+1</span>)%mod;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[<span class="hljs-number">0</span>][len<span class="hljs-number">-1</span>]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[动态规划]背包问题</title>
    <link href="/2025/03/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/"/>
    <url>/2025/03/07/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92-%E8%83%8C%E5%8C%85%E9%97%AE%E9%A2%98/</url>
    
    <content type="html"><![CDATA[<h1 id="动态规划之背包问题"><a href="#动态规划之背包问题" class="headerlink" title="动态规划之背包问题"></a>动态规划之背包问题</h1><p>背包：01背包，完全背包，多重背包。</p><p>01背包：动态规划之背包问题基础。核心就是物品只能取一次。</p><p>完全背包：01背包PLUS版本，核心是物品可以无限取。</p><p>多重背包：01背包的PLUSSS版本，核心是物品i可以取k[i]次。</p><p>混合背包：（mixb(ei)包）就是合了上述三种背包。</p><p>分组背包：分成多组的背包。</p><hr><h2 id="01背包："><a href="#01背包：" class="headerlink" title="01背包："></a>01背包：</h2><p>简单来说就是，给你一堆东西，每个东西最多能拿取一次，就是对于第i种物品，你可以选择将其放入背包中，也可以选择不放入。可以简化成这么一个题目：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">给定n个物品，第<span class="hljs-selector-tag">i</span>个物品的重量为weigh<span class="hljs-selector-attr">[i]</span>,价值为value<span class="hljs-selector-attr">[i]</span>，现在给定一个容量为k的背包，，要求这个背包的所能装的最大价值。<br></code></pre></td></tr></table></figure><p>已知第i个物品的重量为w[i],价值为v[i],以及背包的总容量为k。</p><p>假设DP状态dp(i,j)为在只能放前i个物品的情况下，容量为j的背包所能达到的最大总价值。接下来就是考虑如何状态转移。假设已经处理好了前i-1个物品的所有状态，如果第i个物品不放入背包，则背包容量不会变化，其内包含的价值也不会改变，如果第i个物品放入背包就会出现两种情况，可能是$dp(i-1,j)$最大，也有可能是$dp(i-1,j-w[i])+v[i]$.也就是</p><script type="math/tex; mode=display">dp[i][j]=max(dp[i-1][j],dp[i-1][j-w[i]]+v[i])</script><p>当然了，如果数据比较大的话，二维数组可能会MLE，我们发现可能dp(i)只和dp(i-1)有关，所以可以利用滚动数组将他压缩到一维，就是</p><script type="math/tex; mode=display">dp[j]=max(dp[j],dp[j-w[i]]+v[i])</script><p>这样就可以了。代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">define</span> int long long </span><br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N=<span class="hljs-number">2e5</span><span class="hljs-number">+10</span>;<br><span class="hljs-type">int</span> w[N],v[N],dp[N];<br><span class="hljs-function"><span class="hljs-type">int</span> k</span><br><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)</span></span>&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=k;j&gt;=w[i];j++)&#123;<br>        dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例题：# P1048 [NOIP 2005 普及组] 采药</p><h3 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h3><p>辰辰是个天资聪颖的孩子，他的梦想是成为世界上最伟大的医师。为此，他想拜附近最有威望的医师为师。医师为了判断他的资质，给他出了一个难题。医师把他带到一个到处都是草药的山洞里对他说：“孩子，这个山洞里有一些不同的草药，采每一株都需要一些时间，每一株也有它自身的价值。我会给你一段时间，在这段时间里，你可以采到一些草药。如果你是一个聪明的孩子，你应该可以让采到的草药的总价值最大。”</p><p>如果你是辰辰，你能完成这个任务吗？</p><h4 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h4 id="说明-提示"><a href="#说明-提示" class="headerlink" title="说明/提示"></a>说明/提示</h4><p><strong>【数据范围】</strong></p><ul><li>对于 $30\%$ 的数据，$M \le 10$；</li><li>对于全部的数据，$M \le 100$。</li></ul><p><strong>【题目来源】</strong></p><p>NOIP 2005 普及组第三题</p><p>实现代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=n;j&gt;=<span class="hljs-number">1</span>;j--)&#123;<br>       <span class="hljs-keyword">if</span>(j-w[i]&gt;=<span class="hljs-number">0</span>) dp[i][j]=<span class="hljs-built_in">max</span>(dp[i<span class="hljs-number">-1</span>][j],dp[i<span class="hljs-number">-1</span>][j-w[i]]+v[i]);<br>       <span class="hljs-keyword">else</span> dp[i][j]=dp[i<span class="hljs-number">-1</span>][j];<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="完全背包："><a href="#完全背包：" class="headerlink" title="完全背包："></a>完全背包：</h2><p>完全背包本质上和01背包差不多，但是它的其中一个物品可以选取无限次。</p><p>我们仍然假定，背包中前$i$种物品的状态为$dp(i,j)$，容量为j的背包所能够带来的最大价值。</p><p>同01背包一样，再假设第i种物品能选择k个。</p><script type="math/tex; mode=display">dp[i][j]=max(k->+00)(dp[i-1][j],dp[i-1][j-k*w[i]]+k*v[i])</script><p>但是这种的话会出现O($n^3$)的时间复杂度，所以我们必须优化。很难想到可以优化成01背包的式子：</p><script type="math/tex; mode=display">dp[i][j]=max(dp[i-1][j],dp[i-1][j-w[i]]+v[i])</script><p>同理，可以优化成一维的</p><script type="math/tex; mode=display">dp[j]=max(dp[j],dp[j-w[i]]+v[i])</script><p>但是，完全背包的遍历和01背包是相反的(对于j的循环)。</p><p>看例题：</p><h4 id="题目描述-p1616"><a href="#题目描述-p1616" class="headerlink" title="题目描述(p1616)"></a>题目描述(p1616)</h4><p>此题和原题的不同点：</p><p>$1$. 每种草药可以无限制地疯狂采摘。</p><p>$2$. 药的种类眼花缭乱，采药时间好长好长啊！师傅等得菊花都谢了！</p><h4 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h4><p>输入第一行有两个整数，分别代表总共能够用来采药的时间 $t$ 和代表山洞里的草药的数目 $m$</p><p>第 $2$ 到第 $(m + 1)$ 行，每行两个整数，第 $(i + 1)$ 行的整数 $a_i, b_i$ 分别表示采摘第 $i$ 种草药的时间和该草药的价值。</p><h4 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h4><p>输出一行，这一行只包含一个整数，表示在规定的时间内，可以采到的草药的最大总价值。</p><h4 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例 #1"></a>输入输出样例 #1</h4><h4 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">70 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">71 </span><span class="hljs-number">100</span><br><span class="hljs-symbol">69 </span><span class="hljs-number">1</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出-1-1"><a href="#输出-1-1" class="headerlink" title="输出 #1"></a>输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">140<br></code></pre></td></tr></table></figure><h4 id="数据规模与约定"><a href="#数据规模与约定" class="headerlink" title="数据规模与约定"></a>数据规模与约定</h4><ul><li>对于 $30\%$ 的数据，保证 $m \le 10^3$ 。</li><li>对于 $100\%$ 的数据，保证 $1 \leq m \le 10^4$，$1 \leq t \leq 10^7$，且 $1 \leq m \times t \leq 10^7$，$1 \leq a_i, b_i \leq 10^4$。</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=w[i];j&lt;=W;j++)&#123;<br>        <span class="hljs-keyword">if</span>(dp[j-w[i]]+v[i]&gt;dp[j])<br>        dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w[i]]+v[i])<br>     &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="多重背包："><a href="#多重背包：" class="headerlink" title="多重背包："></a>多重背包：</h2><p>多重背包也是01背包的变种，指的是第$i$种物品最多可以取$k[i]$次。</p><p>实际上这种背包能够完完全全地转化为01背包。在双层循环时再加一个</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">0</span>;m&lt;=k[i];k++)<br></code></pre></td></tr></table></figure><p>这样以来就解决了，状态转移方程如下：</p><script type="math/tex; mode=display">dp[i][j]=max(0->k[i])(dp[i-1][j],dp[i-1][j-k*w[i]]+k*v[i])</script><p>同样的可以滚动数组来到一维。</p><script type="math/tex; mode=display">dp[j]=max(0->k[i])(dp[j],dp[j-k*w[i]]+k*v[i])</script><p>代码实现如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=W;j&gt;=w[i];j--)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=<span class="hljs-number">1</span>;m*w[i]&lt;=W&amp;&amp;m&lt;=k[i];m++)&#123;<br>            dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-k*w[i]]+k*v[i])<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>下面看例题：</p><h4 id="P1833-樱花"><a href="#P1833-樱花" class="headerlink" title="P1833 樱花"></a>P1833 樱花</h4><h4 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h4><p>爱与愁大神后院里种了 $n$ 棵樱花树，每棵都有美学值 $C_i(0 \le C_i \le 200)$。爱与愁大神在每天上学前都会来赏花。爱与愁大神可是生物学霸，他懂得如何欣赏樱花：一种樱花树看一遍过，一种樱花树最多看 $P_i(0 \le P_i \le 100)$ 遍，一种樱花树可以看无数遍。但是看每棵樱花树都有一定的时间 $T_i(0 \le T_i \le 100)$。爱与愁大神离去上学的时间只剩下一小会儿了。求解看哪几棵樱花树能使美学值最高且爱与愁大神能准时（或提早）去上学。</p><h4 id="输入格式-1"><a href="#输入格式-1" class="headerlink" title="输入格式"></a>输入格式</h4><p>共 $n+1$行：</p><p>第 $1$ 行：现在时间 $T_s$（几时：几分），去上学的时间 $T_e$（几时：几分），爱与愁大神院子里有几棵樱花树 $n$。这里的 $T_s$，$T_e$ 格式为：<code>hh:mm</code>，其中 $0 \leq hh \leq 23$，$0 \leq mm \leq 59$，且 $hh,mm,n$ 均为正整数。</p><p>第 $2$ 行到第 $n+1$ 行，每行三个正整数：看完第 $i$ 棵树的耗费时间 $T_i$，第 $i$ 棵树的美学值 $C_i$，看第 $i$ 棵树的次数 $P_i$（$P_i=0$ 表示无数次，$P_i$ 是其他数字表示最多可看的次数 $P_i$）。</p><h4 id="输出格式-1"><a href="#输出格式-1" class="headerlink" title="输出格式"></a>输出格式</h4><p>只有一个整数，表示最大美学值。</p><h4 id="输入输出样例-1-1"><a href="#输入输出样例-1-1" class="headerlink" title="输入输出样例 #1"></a>输入输出样例 #1</h4><h4 id="输入-1-1"><a href="#输入-1-1" class="headerlink" title="输入 #1"></a>输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-number">6</span>:<span class="hljs-number">50</span> <span class="hljs-number">7</span>:<span class="hljs-number">00</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">0</span><br><span class="hljs-symbol">3 </span><span class="hljs-number">3</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">4 </span><span class="hljs-number">5</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h4 id="输出-1-2"><a href="#输出-1-2" class="headerlink" title="输出 #1"></a>输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">11<br></code></pre></td></tr></table></figure><h4 id="说明-提示-1"><a href="#说明-提示-1" class="headerlink" title="说明/提示"></a>说明/提示</h4><p>$100\%$ 数据：$T_e-T_s \leq 1000$（即开始时间距离结束时间不超过 $1000$ 分钟），$n \leq 10000$。保证 $T_e,T_s$ 为同一天内的时间。</p><p>样例解释：赏第一棵樱花树一次，赏第三棵樱花树 $2$ 次。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-type">int</span> dp[N];<br><span class="hljs-type">int</span> w[N],v[N],k[N];<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    string s1,s2;<br>    cin&gt;&gt;s1&gt;&gt;s2&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;w[i]&gt;&gt;v[i]&gt;&gt;k[i];<br>    &#125;<br>    <span class="hljs-keyword">auto</span> check=[&amp;](string s)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;s.<span class="hljs-built_in">size</span>();i++)&#123;<br>            <span class="hljs-keyword">if</span>(s[i]==<span class="hljs-string">&#x27;:&#x27;</span>) <span class="hljs-keyword">return</span> i;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> summ=[&amp;](string s)&#123;<br>        <span class="hljs-type">int</span> q=<span class="hljs-built_in">check</span>(s);<br>        <span class="hljs-keyword">if</span>(q==<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-keyword">return</span> (s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">60</span>+(s[<span class="hljs-number">2</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">10</span>+s[<span class="hljs-number">3</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-built_in">return</span> ((s[<span class="hljs-number">0</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">10</span>+s[<span class="hljs-number">1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">60</span>+(s[<span class="hljs-number">3</span>]-<span class="hljs-string">&#x27;0&#x27;</span>)*<span class="hljs-number">10</span>+s[<span class="hljs-number">4</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> trans=[&amp;](string s1,string s2)&#123;<br>        <span class="hljs-type">int</span> res1=<span class="hljs-built_in">summ</span>(s1);<br>        <span class="hljs-type">int</span> res2=<span class="hljs-built_in">summ</span>(s2);<br>        <span class="hljs-keyword">return</span> res2-res1;<br>    &#125;;<br>    <span class="hljs-type">int</span> T=<span class="hljs-built_in">trans</span>(s1,s2);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(k[i]==<span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=w[i];j&lt;=T;j++)&#123;<br>                dp[j]=<span class="hljs-built_in">max</span>(dp[j],dp[j-w[i]]+v[i]);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k[i];j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> l=T;l&gt;=w[i];l--)&#123;<br>                dp[l]=<span class="hljs-built_in">max</span>(dp[l],dp[l-w[i]]+v[i]);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[T]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><hr><h2 id="混合背包："><a href="#混合背包：" class="headerlink" title="混合背包："></a>混合背包：</h2><p>（上面那个题就是混合背包）实际上就是把上面三个背包：01背包，完全背包和多重背包结合起来了。处理的方式也是很简单：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-keyword">if</span>(满足<span class="hljs-number">01</span>背包的条件)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=w[i];j&lt;=W;j++)&#123;<br>            ......<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(满足完全背包的条件)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=W;j&gt;=w[i];j--)&#123;<br>            ......<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">else</span>&#123;<span class="hljs-comment">//剩下的就是多重背包</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=<span class="hljs-number">1</span>;j&lt;=k[i];j++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> m=W;m&gt;=w[i]*j;m--)&#123;<br>                ......<br>            &#125;<br>        &#125;        <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>只用分部枚举这三种背包的模式就可以了。</p><hr><h2 id="分组背包："><a href="#分组背包：" class="headerlink" title="分组背包："></a>分组背包：</h2><p>分组背包中的物品通常是有写属于那个背包的，我们不妨先输入所有的物品后，再根据其种类再分别在该种类中取其中一件。然后就转变成了01背包。</p><p>首先是如何存储组数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs cpp">vector&lt;vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">v</span>(<span class="hljs-number">101</span>);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>    <span class="hljs-type">int</span> w,val,k<span class="hljs-comment">//占地，价值，组别</span><br>    v[k].<span class="hljs-built_in">pb</span>(&#123;w,val&#125;);<br>&#125;<br></code></pre></td></tr></table></figure><p>例题：</p><h4 id="P1757-通天之分组背包"><a href="#P1757-通天之分组背包" class="headerlink" title="P1757 通天之分组背包"></a>P1757 通天之分组背包</h4><h4 id="题目背景"><a href="#题目背景" class="headerlink" title="题目背景"></a>题目背景</h4><p>直达通天路·小 A 历险记第二篇</p><h4 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h4><p>自 $01$ 背包问世之后，小 A 对此深感兴趣。一天，小 A 去远游，却发现他的背包不同于 $01$ 背包，他的物品大致可分为 $k$ 组，每组中的物品相互冲突，现在，他想知道最大的利用价值是多少。</p><h4 id="输入格式-2"><a href="#输入格式-2" class="headerlink" title="输入格式"></a>输入格式</h4><p>两个数 $m,n$，表示一共有 $n$ 件物品，总重量为 $m$。</p><p>接下来 $n$ 行，每行 $3$ 个数 $a_i,b_i,c_i$，表示物品的重量，利用价值，所属组数。</p><h4 id="输出格式-2"><a href="#输出格式-2" class="headerlink" title="输出格式"></a>输出格式</h4><p>一个数，最大的利用价值。</p><h4 id="输入输出样例-1-2"><a href="#输入输出样例-1-2" class="headerlink" title="输入输出样例 #1"></a>输入输出样例 #1</h4><h4 id="输入-1-2"><a href="#输入-1-2" class="headerlink" title="输入 #1"></a>输入 #1</h4><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">45 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">10</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">10 </span><span class="hljs-number">5</span> <span class="hljs-number">1</span><br><span class="hljs-symbol">50 </span><span class="hljs-number">400</span> <span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h4 id="输出-1-3"><a href="#输出-1-3" class="headerlink" title="输出 #1"></a>输出 #1</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">10<br></code></pre></td></tr></table></figure><h4 id="说明-提示-2"><a href="#说明-提示-2" class="headerlink" title="说明/提示"></a>说明/提示</h4><p>$0 \leq m \leq 1000$，$1 \leq n \leq 1000$，$1\leq k\leq 100$，$a_i, b_i, c_i$ 在 <code>int</code> 范围内。</p><p>代码如下：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;m&gt;&gt;n;<br>    vector&lt;vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt;&gt; <span class="hljs-built_in">v</span>(<span class="hljs-number">101</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-type">int</span> w, val, k;<br>        cin&gt;&gt;w&gt;&gt;val&gt;&gt;k;<br>        v[k].<span class="hljs-built_in">pb</span>(&#123;w,val&#125;);<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> k=<span class="hljs-number">1</span>;k&lt;=<span class="hljs-number">100</span>;k++)&#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=m;i&gt;=<span class="hljs-number">0</span>;i--)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [w,val]:v[k])&#123;<br>                <span class="hljs-keyword">if</span>(i&gt;=w)&#123;<br>                    dp[i]=<span class="hljs-built_in">max</span>(dp[i],dp[i-w]+val);<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>    cout&lt;&lt;dp[m]&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>动态规划</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[数论]费马小定理</title>
    <link href="/2025/03/02/%E6%95%B0%E8%AE%BA-%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/"/>
    <url>/2025/03/02/%E6%95%B0%E8%AE%BA-%E8%B4%B9%E9%A9%AC%E5%B0%8F%E5%AE%9A%E7%90%86/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[数据结构]树状数组</title>
    <link href="/2025/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/"/>
    <url>/2025/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%91%E7%8A%B6%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<blockquote><p>对于已知一个数列(n项)，你需要进行下面两种操作：</p><ul><li><p>将某一个数加上 x</p></li><li><p>求出某区间每一个数的和</p></li></ul></blockquote><p>对于这个问题，如果使用前缀和或者暴力的话那么他的时间复杂度是O($n^2$),这很显然会TLE的。这个时候就需要使用<strong>树状数组</strong>这一数据结构来实现了，其时间复杂度是O($nlog(n)$).</p><h2 id="接下来进入正题，介绍一下树状数组的实现。"><a href="#接下来进入正题，介绍一下树状数组的实现。" class="headerlink" title="接下来进入正题，介绍一下树状数组的实现。"></a>接下来进入正题，介绍一下树状数组的实现。</h2><p>顾名思义，树状数组就是很像树的数组。(确真)</p><p><img src="https://liweiwei1419.github.io/images/algorithms/fenwick-tree/fenwick-tree-5.jpg" alt=""></p><p>用二进制的思维方式看这个树状数组有如下规律：</p><div>c0001=a0001;c数组包含a数组的个数：1                              </div><div>c0010=a0010+a0001；c数组中包含a数组的个数：2</div><div>c0011=a0011；c数组中包含a数组的个数：1</div><div>c0100=a0001+a0010+a0011+a0100;c数组中包含a数组的个数：4</div><p>c5,c6,c7,c8也是同理的</p><p>从这里可以看出c数组中包含a数组中元素的个数由c数组下标的最低位1来确定。而且元素数目就是$2^k$(其中k就是最低位1的位数)。</p><p><img src="https://liweiwei1419.github.io/images/algorithms/fenwick-tree/fenwick-tree-8.jpg" alt=""></p><h3 id="这里就要来介绍lowbit函数了！"><a href="#这里就要来介绍lowbit函数了！" class="headerlink" title="这里就要来介绍lowbit函数了！"></a>这里就要来介绍lowbit函数了！</h3><p>lowbit函数用来快速计算二进制中最低位1出现的位置，下面来介绍一下原理：补码</p><p>比如：6的二进制就是0110，则其补码就是1001+1=1010，0110&amp;1010=0010。</p><p>即c[6]中的元素个数就是$2^1$(0010);</p><p>所以我们定义一个lowbit函数来求c数组中当前下标对应a数组中元素的个数：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">lowbit</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-keyword">return</span> x&amp;-x;<br>&#125;<br></code></pre></td></tr></table></figure><p>求完了个数之后就可以进行操作了；</p><h3 id="对数组的预处理（add（）函数）："><a href="#对数组的预处理（add（）函数）：" class="headerlink" title="对数组的预处理（add（）函数）："></a>对数组的预处理（add（）函数）：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;<br>        tree[x]+=y;<br>        x+=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="求区间值ask-函数-gt-对于一维数组来说"><a href="#求区间值ask-函数-gt-对于一维数组来说" class="headerlink" title="求区间值ask()函数-&gt;对于一维数组来说:"></a>求区间值ask()函数-&gt;对于一维数组来说:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">ask</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        res+=tree[x];<br>        x-=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="如下是树状数组可以实现的功能："><a href="#如下是树状数组可以实现的功能：" class="headerlink" title="如下是树状数组可以实现的功能："></a>如下是树状数组可以实现的功能：</h2><h3 id="单点修改-单点查询"><a href="#单点修改-单点查询" class="headerlink" title="单点修改,单点查询:"></a>单点修改,单点查询:</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">add</span>(x,y);<br>ans=<span class="hljs-built_in">ask</span>(x)-<span class="hljs-built_in">ask</span>(x<span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure><h3 id="单点修改-区间查询："><a href="#单点修改-区间查询：" class="headerlink" title="单点修改,区间查询："></a>单点修改,区间查询：</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">add</span>(x,y);<br>ans=<span class="hljs-built_in">ask</span>(r)-<span class="hljs-built_in">ask</span>(l<span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure><h3 id="区间修改-单点查询："><a href="#区间修改-单点查询：" class="headerlink" title="区间修改,单点查询："></a>区间修改,单点查询：</h3><p>这里使用差分的思想，创立一个b数组，来记录[l,r]中挂上+k标记的个数(即a数组每个元素+k的个数)，维护树状数组。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-built_in">add</span>(l,k);<br><span class="hljs-built_in">add</span>(r<span class="hljs-number">+1</span>,-k);<br>ans=a[x]+<span class="hljs-built_in">ask</span>(x);<br></code></pre></td></tr></table></figure><h3 id="区间修改-区间查询："><a href="#区间修改-区间查询：" class="headerlink" title="区间修改,区间查询："></a>区间修改,区间查询：</h3><p>假设数组t1维护b[i]差分数组，数组t2维护i*b[i]前缀和。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;<br>        t1[x]+=k;<br>        x+=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">ask1</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        res+=t1[x];<br>        x-=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add1</span><span class="hljs-params">(<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> k)</span></span>&#123;<br>    <span class="hljs-keyword">while</span>(x&lt;=n)&#123;<br>        t2[x]+=k;<br>        x+=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">ask2</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span>(x)&#123;<br>        res+=t2[x];<br>        x-=<span class="hljs-built_in">lowbit</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-built_in">add1</span>(l1,k);<br><span class="hljs-built_in">add1</span>(r1<span class="hljs-number">+1</span>,-k);<br><span class="hljs-built_in">add2</span>(l1,(l1<span class="hljs-number">-1</span>)*k);<br><span class="hljs-built_in">add2</span>(r1<span class="hljs-number">+1</span>,-(r1*d));<br>ans=<span class="hljs-built_in">ask2</span>(r1)*r1+<span class="hljs-built_in">ask</span>(l1<span class="hljs-number">-1</span>)-<span class="hljs-built_in">ask</span>(r1)-<span class="hljs-built_in">ask</span>(l1<span class="hljs-number">-1</span>)*(l1<span class="hljs-number">-1</span>);<br></code></pre></td></tr></table></figure><p>以上是对于一维数组来说的。二维数组同理，主要差别就是差一层循环的事。</p><p>顺便粘贴一下HUT ACM组NO.1_Yue_chen学长的树状数组封装：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">BIT</span> &#123;<br>    <span class="hljs-type">int</span> n; vector&lt;T&gt; tr;<br>     <br>    <span class="hljs-built_in">BIT</span>() &#123;&#125;<br>    <span class="hljs-built_in">BIT</span>(<span class="hljs-type">int</span> n) &#123;<span class="hljs-built_in">init</span>(n);&#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>-&gt;n = n;<br>        tr.<span class="hljs-built_in">assign</span>(n<span class="hljs-number">+1</span>, <span class="hljs-built_in">T</span>());<br>    &#125;<br>     <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T y=<span class="hljs-number">1</span>)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(; x&lt;=n; x+=(x&amp;-x)) tr[x]+=y;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">query</span><span class="hljs-params">(<span class="hljs-type">int</span> x, T y=<span class="hljs-number">0</span>)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span>(; x; x-=(x&amp;-x)) y+=tr[x];<br>        <span class="hljs-keyword">return</span> y;<br>    &#125;<br>    <span class="hljs-function">T <span class="hljs-title">range</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span>(l == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">query</span>(r) - <span class="hljs-built_in">query</span>(l<span class="hljs-number">-1</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">kth</span><span class="hljs-params">(T k)</span> </span>&#123;<br>        <span class="hljs-type">int</span> x = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>&lt;&lt;(<span class="hljs-type">int</span>)<span class="hljs-built_in">log2</span>(n); i; i/=<span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">if</span>(x+i &lt;= n <span class="hljs-keyword">and</span> k &gt;= tr[x+i<span class="hljs-number">-1</span>]) &#123;<br>                x += i;<br>                k -= tr[x - <span class="hljs-number">1</span>];<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> x;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>牛牛寒假训练营2题解</title>
    <link href="/2025/01/24/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A52%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/01/24/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A52%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>牛牛寒假训练营1题解</title>
    <link href="/2025/01/22/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A51%E9%A2%98%E8%A7%A3/"/>
    <url>/2025/01/22/%E7%89%9B%E7%89%9B%E5%AF%92%E5%81%87%E8%AE%AD%E7%BB%83%E8%90%A51%E9%A2%98%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="该加训力！这场比赛鉴定为我的鸣潮练度提升200-导致的ACM水平下降了1e9-7倍，而其他人却稳定提升2e5-5倍"><a href="#该加训力！这场比赛鉴定为我的鸣潮练度提升200-导致的ACM水平下降了1e9-7倍，而其他人却稳定提升2e5-5倍" class="headerlink" title="该加训力！这场比赛鉴定为我的鸣潮练度提升200%导致的ACM水平下降了1e9+7倍，而其他人却稳定提升2e5+5倍"></a>该加训力！<del><a href="https://mc.kurogames.com/">这场比赛鉴定为我的鸣潮练度提升200%导致的ACM水平下降了1e9+7倍，而其他人却稳定提升2e5+5倍</a></del></h1><h2 id="前言："><a href="#前言：" class="headerlink" title="前言："></a>前言：</h2><p>牛牛训练营1第一场只写出四道题，其中一些题的罚时因为一些浅显的错误WA了好几发实在是太可惜了。下面就从我做出的四题AC的顺序开始分析，然后再进行补题。</p><p>签到题：D G B A；</p><h2 id="D题："><a href="#D题：" class="headerlink" title="D题："></a>D题：</h2><p>题面如下：</p><p>小红拿到了一个数组，她可以进行任意次以下操作：选择两个元素，使得其中一个加 1，另一个减 1。<br>小红希望最终数组变成一个排列，请你帮助他确定这能否实现。如果可以实现的话，还需要求出最小操作次数。  </p><p>长度为 n 的排列是由 1∼n 这 n 个整数、按任意顺序组成的数组，其中每个整数恰好出现一次。例如，{2,3,1,5,4} 是一个长度为 5 的排列，而 {1,2,2} 和 {1,3,4} 都不是排列，因为前者存在重复元素，后者包含了超出范围的数。</p><p><strong>分析：</strong></p><p>只需要开一个map统计出现的数组元素以及其个数，首先判断map中的数组元素是否是2然后判断着两个元素的cnt是否相等即可。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; ma;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        ma[a[i]]++;<br>    &#125;<br>    <span class="hljs-type">int</span> ans=<span class="hljs-number">0</span>;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [x,y]:ma)&#123;<br>        ans++;<br>        a.<span class="hljs-built_in">push_back</span>(ma[x]);<br>    &#125;<br>    <span class="hljs-keyword">if</span>(ans==<span class="hljs-number">2</span>&amp;&amp;a[<span class="hljs-number">0</span>]==a[<span class="hljs-number">1</span>])&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;Yes&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    cout&lt;&lt;<span class="hljs-string">&quot;No&quot;</span>&lt;&lt;endl;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="G题："><a href="#G题：" class="headerlink" title="G题："></a>G题：</h2><p>题面如下：</p><p>小红拿到了一个数组，她可以进行任意次以下操作：选择两个元素，使得其中一个加 1，另一个减 1。<br>小红希望最终数组变成一个<u>排列</u>，请你帮助他确定这能否实现。如果可以实现的话，还需要求出最小操作次数。  </p><p>长度为 n 的排列是由 1∼n 这 n 个整数、按任意顺序组成的数组，其中每个整数恰好出现一次。例如，{2,3,1,5,4} 是一个长度为 5 的排列，而 {1,2,2} 和 {1,3,4} 都不是排列，因为前者存在重复元素，后者包含了超出范围的数。</p><p>分析：</p><p>我们观察题目，发现小红的操作并不会使数组中数的总和改变，这意味着只有当原数组的总和等于1+2+…+n时才能进行下一步（否则直接输出-1）。然后我们对数组进行排序。我们知道这个数组修改后必定会包含{1，2，…，n}这些元素，我们不妨设我们的数组就是{1，2，…，n}。故我们排序后直接对排序后的数组减去i的绝对值进行++++++。输出cnt/2即可。（因为一加一减是一次操作，我们进行上述的操作时，对整体求的是两倍）</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    ll sum=<span class="hljs-number">0</span>;<br>    ll n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        sum+=a[i];<br>    &#125;<br>    ll pd=n*(n<span class="hljs-number">+1</span>)/<span class="hljs-number">2</span>;<span class="hljs-comment">//求等差数列公式</span><br>    <span class="hljs-keyword">if</span>(sum!=pd)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    ll cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-built_in">sort</span>(a<span class="hljs-number">+1</span>,a+n<span class="hljs-number">+1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cnt+=<span class="hljs-built_in">abs</span>(a[i]-i);<br>    &#125;<br>    cout&lt;&lt;cnt/<span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>切记切记要开龙龙！！不然会爆int！！！！</strong></p><h2 id="B题："><a href="#B题：" class="headerlink" title="B题："></a>B题：</h2><p>题面如下：</p><p>小红拿到了一棵树，她想请你寻找一条简单路径，使得这条路径不重不漏的经过所有节点。如果不存在这样的简单路径，则直接输出 −1。  </p><p>简单路径是指这样一条路径，其经过的顶点和边互不相同。</p><p>分析：</p><p>看起来是图论，实际上是一道思维题啦！通过幻想就可以得知，要求一条的简单路径，其中的头节点和尾节点只会在输入中出现一次，而其他节点只能出现两次。，我们就可以判断只出现不是两次的节点，（开map记录一下），然后输出即可。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">bool</span> vis[n];<br>    map&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt; d;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n<span class="hljs-number">-1</span>;i++)&#123;<br>        <span class="hljs-type">int</span> u,v;<br>        cin&gt;&gt;u&gt;&gt;v;<br>        d[u]++;<br>        d[v]++;<br>    &#125;<br>    vector&lt;<span class="hljs-type">int</span>&gt; b;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        <span class="hljs-keyword">if</span>(d[i]==<span class="hljs-number">1</span>)&#123;<br>            b.<span class="hljs-built_in">push_back</span>(i);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(b.<span class="hljs-built_in">size</span>()!=<span class="hljs-number">2</span>)&#123;<br>        cout&lt;&lt;<span class="hljs-number">-1</span>&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        cout&lt;&lt;b[<span class="hljs-number">0</span>]&lt;&lt;<span class="hljs-string">&quot; &quot;</span>&lt;&lt;b[<span class="hljs-number">1</span>]&lt;&lt;endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="A题："><a href="#A题：" class="headerlink" title="A题："></a>A题：</h2><p>小红拿到了一个由 n 个数字组成的数组 {a1​,a2​,⋯,an​}，她希望你找到一个不大于 10^18 的正整数 x，满足 x 和数组中任意一个元素都互不为倍数关系，即对于 i∈[1,n]，x 不是 ai​ 的倍数，且 ai​ 也不是 x 的倍数。</p><p>分析：</p><p>还是很简单的，ai的范围为1≤ai​≤10^9，我们只需要找一个大于1e9的质数（比如1e9+7）;</p><p>如果数组中含有1，设置ans=-1，否则输出1e9+7。（我是铸币，直接在输入循环中return 0，导致WA了5发。）</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-type">int</span> a[n];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)&#123;<br>        cin&gt;&gt;a[i];<br><br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>;i&lt;n;i++)<br>    <span class="hljs-keyword">if</span>(a[i]==<span class="hljs-number">1</span>)&#123;<br>            cout&lt;&lt;<span class="hljs-string">&quot;-1&quot;</span>&lt;&lt;endl;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>    cout&lt;&lt;mod&lt;&lt;endl;<br></code></pre></td></tr></table></figure><p>好了！以上就是我会做的题目了。接下来就该开始补题目了。<del>嘻嘻</del></p><h1 id="接下来是进阶题目：E-H-J-M"><a href="#接下来是进阶题目：E-H-J-M" class="headerlink" title="接下来是进阶题目：E H J M"></a><strong>接下来是进阶题目：E H J M</strong></h1><h2 id="先来M题："><a href="#先来M题：" class="headerlink" title="先来M题："></a>先来M题：</h2><p>定义一个数组的极差为：数组的元素最大值减去最小值。<br>小红拿到了一个数组，她准备进行恰好一次操作：选择一个非空区间，将其中所有元素都乘以 2。<br>小红希望最小化数组的极差，你能帮帮她吗？</p><p>（准备抄题解了）</p><p>思路：</p><p>我们需要找到该数组中最小的数假设确定它及其位置，假设最小值点为序列为k，则我们要直接使用multiset中的迭代器.rbegin()与.begin()寻找其最大值与最小值，我们设其为l,r,初始化为l=r。然后从k开始向l—或者向r++一个个遍历，寻找极差的最小值。</p><p>Code：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    cin&gt;&gt;n;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    vector&lt;pair&lt;<span class="hljs-type">int</span>,<span class="hljs-type">int</span>&gt;&gt; b;<br>    multiset&lt;<span class="hljs-type">int</span>&gt; mu;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;a[i];<br>        b.<span class="hljs-built_in">push_back</span>(&#123;a[i],i&#125;);<br>        mu.<span class="hljs-built_in">insert</span>(a[i]);<br>    &#125;<br>    ranges::<span class="hljs-built_in">sort</span>(b);<br>    <span class="hljs-keyword">auto</span> [l,r]=b[<span class="hljs-number">0</span>];<br>    mu.<span class="hljs-built_in">extract</span>(l);<br>    mu.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>*l);<br>    <span class="hljs-type">int</span> ans=*mu.<span class="hljs-built_in">rbegin</span>()-*mu.<span class="hljs-built_in">begin</span>();<br>    l=r;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">auto</span> [_,i]:b)&#123;<br>        <span class="hljs-keyword">if</span>(i&gt;=l&amp;&amp;i&lt;=r) <span class="hljs-keyword">continue</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=l<span class="hljs-number">-1</span>;j&gt;=i;j--)&#123;<br>            mu.<span class="hljs-built_in">extract</span>(a[j]);<br>            mu.<span class="hljs-built_in">insert</span>(a[j]*<span class="hljs-number">2</span>);<br>            ans=<span class="hljs-built_in">min</span>(ans,*mu.<span class="hljs-built_in">rbegin</span>()-*mu.<span class="hljs-built_in">begin</span>());<br>        &#125;<br>        l=<span class="hljs-built_in">min</span>(l,i);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> j=r<span class="hljs-number">+1</span>;j&lt;=i;j++)&#123;<br>            mu.<span class="hljs-built_in">extract</span>(a[j]);<br>            mu.<span class="hljs-built_in">insert</span>(<span class="hljs-number">2</span>*a[j]);<br>            ans=<span class="hljs-built_in">min</span>(ans,*mu.<span class="hljs-built_in">rbegin</span>()-*mu.<span class="hljs-built_in">begin</span>());<br>        &#125;<br>        r=<span class="hljs-built_in">max</span>(r,i);<br>    &#125;<br>    cout&lt;&lt;ans;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充："><a href="#补充：" class="headerlink" title="补充："></a>补充：</h2><p><strong>multiset</strong>是C++<set>库中的一个类型，相当于一个集合，它支持插入一个数，和删除一个数，操作的时间复杂度均是O（log（n））。</p><p>multiset提供了.extract()与.insert()的操作,可以快速的进行删除和增添操作。</p><p>然后他的.rbegin()与.begin()两个操作能返回数组中的最大值和最小值</p><h2 id="然后就是E题："><a href="#然后就是E题：" class="headerlink" title="然后就是E题："></a>然后就是E题：</h2><p>小红定义一个数组是“双生数组”，当且仅当该数组大小为偶数，数组的元素种类恰好为 2 种，且这两种元素的出现次数相同。例如 {1,1,4,4,1,4} 是双生数组。<br>现在小红拿到了一个长度为偶数的数组，她可以进行若干次操作，每次操作将选择一个元素，使其加 1 或者减 1。小红希望你计算将该数组变成双生数组的最小操作次数。</p><p>思路：</p><p>我们对这个数组进行排序，然后会发现就是求数组前面一半的中位数和数组后面一半的中位数，然后将数组分别加上中位数的相减的绝对值，再考虑一下特殊情况即可。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n;<br>    <span class="hljs-built_in">memset</span>(a,<span class="hljs-number">0</span>,<span class="hljs-built_in">sizeof</span>(a));<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) cin&gt;&gt;a[i];<br>    <span class="hljs-built_in">sort</span>(a<span class="hljs-number">+1</span>,a+n<span class="hljs-number">+1</span>);<br>    ll cnt=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">auto</span> sum=[&amp;](<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)&#123;<br>        ll res=<span class="hljs-number">0</span>;<br>       <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n/<span class="hljs-number">2</span>;i++)&#123;<br>            res+=<span class="hljs-built_in">abs</span>(a[i]-x);<br>        &#125;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=n/<span class="hljs-number">2</span><span class="hljs-number">+1</span>;i&lt;=n;i++)&#123;<br>            res+=<span class="hljs-built_in">abs</span>(a[i]-y);<br>        &#125; <br>        <span class="hljs-keyword">return</span> res;<br>    &#125;;<br>    <span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)&#123;<br>        <span class="hljs-keyword">auto</span> t = <span class="hljs-number">0ll</span>;<br>        <span class="hljs-keyword">if</span>(a[x] != a[y]) t = <span class="hljs-built_in">sum</span>(a[x], a[y]);<br>        <span class="hljs-keyword">else</span> t = <span class="hljs-built_in">min</span>(<span class="hljs-built_in">sum</span>(a[x] - <span class="hljs-number">1</span>, a[y]), <span class="hljs-built_in">sum</span>(a[x], a[y] + <span class="hljs-number">1</span>));<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;;<br>    <span class="hljs-type">int</span> t=n&gt;&gt;<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> x=<span class="hljs-number">0</span>,y=<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(t&amp;<span class="hljs-number">1</span>)&#123;<br>        x=t<span class="hljs-number">+1</span>&gt;&gt;<span class="hljs-number">1</span>;<br>        y=t+x;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        x=t&gt;&gt;<span class="hljs-number">1</span>;<br>        y=t+x<span class="hljs-number">+1</span>;<br>    &#125;<br><br>    cout&lt;&lt;<span class="hljs-built_in">check</span>(x,y)&lt;&lt;endl;<br>    <span class="hljs-comment">//cout&lt;&lt;cnt&lt;&lt;endl;</span><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>补充：</p><p>这里采用了C++20新特性，可以通过上述代码方式在主函数中构建函数。</p>]]></content>
    
    
    
    <tags>
      
      <tag>ACM</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[数论]裴蜀定理</title>
    <link href="/2025/01/19/%E6%95%B0%E8%AE%BA-%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/"/>
    <url>/2025/01/19/%E6%95%B0%E8%AE%BA-%E8%A3%B4%E8%9C%80%E5%AE%9A%E7%90%86/</url>
    
    <content type="html"><![CDATA[<p>在周赛上因为不记得扩展欧几里得和裴蜀定理，而导致那道超级easy的题目没写出来。</p>]]></content>
    
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[模板]快速幂</title>
    <link href="/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    <url>/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%BF%AB%E9%80%9F%E5%B9%82/</url>
    
    <content type="html"><![CDATA[<p>相信大家对求幂运算都不陌生吧。当m是正整数时nᵐ的意义为m个n相乘，n的m次幂也就是n的m次方。</p><p>对于初学者，代码是如下呈现的：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">pow</span><span class="hljs-params">(<span class="hljs-type">long</span> <span class="hljs-type">long</span> n,<span class="hljs-type">long</span> <span class="hljs-type">long</span> m)</span></span>&#123;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> res=<span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">long</span> <span class="hljs-type">long</span> i=<span class="hljs-number">1</span>;i&lt;=m;i++)&#123;<br>        res*=n;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><p>那么在计算幂的时候他的时间复杂度就是O(m)。但是……假设如果说n,</p>]]></content>
    
    
    
    <tags>
      
      <tag>数论</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>[数据结构]并查集</title>
    <link href="/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2025/01/16/%E6%A8%A1%E6%9D%BF-%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="什么是“并查集”？"><a href="#什么是“并查集”？" class="headerlink" title="什么是“并查集”？"></a><u><strong>什么是“并查集”？</strong></u></h1><p><strong>并查集是一种用于管理元素所属集合的数据结构，实现为一个森林，其中每棵树表示一个集合，树中的节点表示对应集合中的元素。</strong></p><p><strong>顾名思义，并查集支持两种操作：</strong></p><ul><li><strong>合并（Union）：合并两个元素所属集合（合并对应的树）</strong></li><li><strong>查询（Find）：查询某个元素所属集合（查询对应的树的根节点），这可以用于判断两个元素是否属于同一集合</strong></li></ul><p><strong>并查集在经过修改后可以支持单个元素的删除、移动；使用动态开点线段树还可以实现可持久化并查集。（摘自OI WIKI）</strong></p><h2 id="并查集（easy-ver）的实现包含几个个步骤："><a href="#并查集（easy-ver）的实现包含几个个步骤：" class="headerlink" title="并查集（easy.ver）的实现包含几个个步骤："></a><u><strong>并查集（easy.ver）的实现包含几个个步骤：</strong></u></h2><h3 id="1-初始化数组"><a href="#1-初始化数组" class="headerlink" title="1.初始化数组"></a>1.初始化数组</h3><p><strong>并查集通过构建一个一维数组来实现，本质上是维护一个森林。我们先定义出一个一维数组f[N]（其中N代表森林中元素个数）用来存放每一棵树的编号。一开始的时候每一棵树都是一个独立的集合。</strong></p><p><strong>代码实现如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++) &#123;<br>        f[i] = i;<br>    &#125;<br></code></pre></td></tr></table></figure><h3 id="2-查询（Find）"><a href="#2-查询（Find）" class="headerlink" title="2.查询（Find）"></a>2.查询（Find）</h3><p><strong>我们需要沿着树向上移动，如果上一级是其父节点，则函数会继续进行查询，直至找到根节点（即祖宗节点）。</strong></p><p><img src="https://oi-wiki.org/ds/images/disjoint-set-find.svg" alt=""></p><p><strong>代码实现如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (f[x]!=x) &#123;<br>        <span class="hljs-keyword">return</span> f[x]=<span class="hljs-built_in">find</span>(f[x]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[x];<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-合并（Union）"><a href="#3-合并（Union）" class="headerlink" title="3.合并（Union）"></a>3.合并（Union）</h3><p><strong>我们由上一步查询可得知相对应的集合的祖宗节点（即根节点），我们只需要将这两个集合的祖父节点相连即可。</strong></p><p><img src="https://oi-wiki.org/ds/images/disjoint-set-merge.svg" alt=""></p><p><strong>代码实现如下：</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">union</span><span class="hljs-params">()</span></span>&#123;<br>    f[<span class="hljs-built_in">find</span>(b)] = <span class="hljs-built_in">find</span>(f[a]);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>这就是并查集的简单的实现过程（一般不会超时吧）。如果遇到数据量巨大的时候，我们可以对查询与合并进行优化，这是后话了。</strong></p><h1 id="接下来我们看例题！！！"><a href="#接下来我们看例题！！！" class="headerlink" title="接下来我们看例题！！！"></a>接下来我们看例题！！！</h1><p><a href="https://www.luogu.com.cn/problem/P3367">洛谷p3367【模板】并查集</a></p><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p><strong>如题，现在有一个并查集，你需要完成合并和查询操作。</strong></p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p><strong>第一行包含两个整数 $N,M$ ,表示共有 $N$ 个元素和 $M$ 个操作。</strong></p><p><strong>接下来 $M$ 行，每行包含三个整数 $Z_i,X_i,Y_i$ 。</strong></p><p><strong>当 $Z_i=1$ 时，将 $X_i$ 与 $Y_i$ 所在的集合合并。</strong></p><p><strong>当 $Z_i=2$ 时，输出 $X_i$ 与 $Y_i$ 是否在同一集合内，是的输出</strong><br> <strong><code>Y</code> ；否则输出 <code>N</code> 。</strong></p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p><strong>对于每一个 $Z_i=2$ 的操作，都有一行输出，每行包含一个大写字母，为 <code>Y</code> 或者 <code>N</code> 。</strong></p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">4 </span><span class="hljs-number">7</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">2</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">2</span> <span class="hljs-number">3</span><br><span class="hljs-symbol">2 </span><span class="hljs-number">1</span> <span class="hljs-number">4</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css">N<br><span class="hljs-attribute">Y</span><br>N<br><span class="hljs-attribute">Y</span><br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>对于 $30\%$ 的数据，$N \le 10$，$M \le 20$。</strong></p><p><strong>对于 $70\%$ 的数据，$N \le 100$，$M \le 10^3$。</strong></p><p><strong>对于 $100\%$ 的数据，$1\le N \le 10^4$，$1\le M \le 2\times 10^5$，$1 \le X_i, Y_i \le N$，$Z_i \in \{ 1, 2 \}$。</strong></p><p><strong>AC code:</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-comment">//And in that light,I&#x27;ll find deliverance;</span><br><span class="hljs-comment">//可以和我打一辈子ACM吗？;</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> IOS ios::sync_with_stdio(0), cin.tie(0), cout.tie(0)</span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-keyword">typedef</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> ll;<br><span class="hljs-keyword">typedef</span> pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;PII;<br><span class="hljs-type">const</span> <span class="hljs-type">int</span> N = <span class="hljs-number">2e5</span> + <span class="hljs-number">10</span>;<br><span class="hljs-type">int</span> op;<br>ll f[N];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> ( f[x] != x ) &#123;<br>        <span class="hljs-keyword">return</span> f[x] = <span class="hljs-built_in">find</span>(f[x]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> f[x];<br>&#125;<br><span class="hljs-type">int</span> n, q;<br><span class="hljs-type">int</span> a, b;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">1</span>) &#123;<br>        f[<span class="hljs-built_in">find</span>(b)] = <span class="hljs-built_in">find</span>(f[a]);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (op == <span class="hljs-number">2</span>) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">find</span>(a) == <span class="hljs-built_in">find</span>(b))<br>            cout &lt;&lt; <span class="hljs-string">&quot;Y&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">else</span><br>            cout &lt;&lt; <span class="hljs-string">&quot;N&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    IOS;<br>    cin &gt;&gt; n &gt;&gt; q;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        f[i] = i;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (q--) &#123;<br>        cin &gt;&gt; op &gt;&gt; a &gt;&gt; b;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br><br>&#125;<br></code></pre></td></tr></table></figure><p><del>这是我新生赛的一道题目，因为板子记错了WA了25发，呜呜呜呜呜呜呜</del>~~~~</p>]]></content>
    
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>我的第一条博客</title>
    <link href="/2025/01/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/"/>
    <url>/2025/01/15/%E6%88%91%E7%9A%84%E7%AC%AC%E4%B8%80%E6%9D%A1%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>你好！欢迎来到我的博客。这是我的第一条blog。</p>]]></content>
    
    
    
    <tags>
      
      <tag>你好！</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
